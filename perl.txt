
use diagnostics
    编译报告更为详尽的问题描述

use strict
    强制使用更严格的约束规则
    从Perl 5.12开始，使用了 use 5.012 就会自动加载strict编译指令

$_
    print的默认变量
    foreach的默认控制变量





///////////////////////
    第2章
///////////////////////

perl -v
    查看perl的版本

数字表示方式：
    在perl内部，总是按双精度浮点数的要求来保存数字并进行运算的
    63
    -46
    36e8
    12345678 = 1234_5678
    1.25
    255.00
    7.25e5
    -2.5e2
    -3.5e-8
    -1.3E-4

    0377 八进制数，等于十进制的255
    0xff 十六进制数，等于十进制的255
    0b1111_1111 二进制数，等于十进制的255

    2+3
    5.1-3.4
    3*5
    14/2.3
    10%3    取模
    2**8    乘方

单引号内的所有字符都代表他们自己，除了单引号和反斜线外
    \' 表示单引号
    \\ 表示反斜线

字符串操作符
    . 连接操作符
        "hello"."world"     = "helloworld"
        "hello".' '."world" = "hello world"
        'hello world'."\n"  = "hello world\n"

    x 重复操作符
        "fred"x3 = "fredfredfred"
        5x4      = "5555"

use diagnostics
    编译报告更为详尽的问题描述

${what}s
    可以用花括号把变量名括起来，避免歧义

$omega = chr(0x03C9)
    把代码点转换成字符

    或直接在双引号内用\x{}
        "\x{03B1}\x{033C9}"

$code_point = ord('?')
    把字符转换成代码点

比较操作符
    比较        数字    字符串
    相等        ==      eq
    不等        !=      ne
    小于        <       lt
    大于        >       gt
    小于或等于  <=      le
    大于或等于  >=      ge

if控制结构
    if () {

    }

    if () {

    }else{

    }

    if () {

    }elsif () {

    }else {

    }


    在判断时
        如果是数字，0为假，所有其他数字都为真
        如果是字符串，空字符串（''）为假，其他所有字符串为真
        如果既不是数字也不是字符串，那就先转化成数字或字符串在进行判断
        '0'是唯一被当成假的空字符串，'0'跟数字0是同一个标量

<STDIN>
    从标准输入读取一行文本，直到换行符为止

chomp
    去掉字符串末尾的一个换行符,返回值是实际移除的字符个数

while控制结构
    while () {

    }

undef值
    变量的初始值是特殊的undef
    当成数字使用，表现是0
    当成字符串使用，表现是空字符串（''）

defined函数
    要判断某个字符串是undef而不是空字符串，可以使用defined函数
    如果是undef，该函数返回假，否则返回真

    应用：
        行输入操作符<STDIN>有时候会返回undef。在一般情况下他会返回一行文本，
        但若没有更多输入，比如读到文件结尾(end-of-file)时，他就会返回undef。

        $madonna = <STDIN>;
        if(defined($madonna)) {
            print "The input was $madonna";
        } else {
            print "No input available!\n";
        }

$madonna = undef;
    创建undef值






///////////////////////
    第3章
///////////////////////

$fred[0] = "zhang";
$fred[1] = "li";
    数组元素

有数组rocks，它的最后一个元素的索引值是$#rocks,这个数值比数组元素的个数少1，因为还有一个编号0的元素
$rocks[-1]  数组的最后一个元素
$rocks[-2]  数组的倒数第二个元素

列表直接量
    (1,2,3)
    ("fred",4.5)
    (1..100)    100个整数构成的列表
    (5..1)  空列表，..只能向上计数
    ("fred","barney","betty")
    qw(fred barney betty) = qw# fred barney berry #
        在qw构建的列表中，不能像双引号内的字符串一样使用\n或$fred
        perl会将其当成单引号内的字符串来处理，并忽略空白符（如空格，制表符，换行符）
        允许其他的定界符
    qw(
        fred
        barney
        betty
    )

列表的赋值
    ($fred,$barney,$dino) = ("stone","rubble",undef)
    ($fred,$barney) = ($barney,$fred)   交换两个变量的值
    @rock = qw/ bed slate lava /
    @copy = @quarry

pop操作符
    它负责取出数组中最后一个元素并将其作为返回值返回

    @array = 5..9;
    $fred = pop(@array); #$fred变成9，@array现在是(5,6,7,8)
    pop @array; #删除数组最后一个元素

push操作符
    添加一个元素到数组末端

    push(@array,0); #@array现在是(5,6,7,0)
    @other = qw/ 2 3 /
    pop @array,@other;  #@array现在是(5,6,7,0,2,3)
    pop @array,1..5;

shift、unshift操作符
    对数组的开头进行处理

    @array = qw/ 4 5 /
    $m = shift(@array);  #@array变成(5)
    unshift @array,1..3;    #@array变成(1,2,3,5)

splice操作符
    可以对数组的中间元素进行操作

    第一个参数是目标数组
    第二个参数是数组元素的起始位置
        只给两个参数时，把从开始一直到末尾的元素全部取出来并返回

    第三个参数是要操作的长度，不是结束位置
        只给三个参数时，删除一个数组片段

    第四个参数是要替换的列表

    如果把第三个参数设置为0，那么会在起始位置之前添加列表

foreach控制结构
    foreach $element (qw/ li zhag/) {

    }

    控制变量并不是列表元素的复制品，他就是列表元素本身
    如果循环中修改了控制变量的值，也就同时修改了这个列表元素

    foreach $rock (@rocks) {
        $rock = "\t$rock";
        $rock .= "\n";
    }
        在@rocks的每一个元素前加上制表符，同时在末尾加上换行符

    循环结束后，控制变量任然是循环前的值，所以不用担心之前用过同名的变量

reverse操作符
    读取列表的值(也可能来自数组)，并按相反的次序返回该列表

    @wilma = reverse 1..5; #可以弥补..只能递增的不足

    reverse @wilma; #错误用法
    @wilma = reverse @wilma; #正确
        reverse返回相反的列表，但是并不会修改传进来的参数

sort操作符
    对列表按照Unicode进行排序,并返回列表

    @number = sort 97..102; #得100,101,102,97,98,99
        以1开头的字符串会排在以9开头的字符串的前面

    sort @rock；#错误用法
    @rock = sort @rock；#正确

each操作符
    从Perl 5.12开始，可以对数组使用each操作符。

    use 5.012;
    while(my($index,$value) = each @rocks) {
        say "$index；$value";
    }

    foreach $index (0..$#rocks) {
        print "$index:$rocks[$index]\n";
    }

sort在标量上下文中返回undef
reverse在标量上下文中返回逆序后的字符串
    $line = reverse qw/ yabba dabba doo /; #得到oodabbadabbay

@wilma = undef; #得到一个仅有一个元素的列表
@betty = (); #清空数组的办法

强制指定标量上下文 scalar
    print "I have",scalar @rocks," rocks\n";

@line = <STDIN>;
    若果输入是文件，会读取所有行，每一行是一个列表元素
    如果输入来自键盘，可以用control+d表示输入结束

chomp(@line = <STDIN>);
    会去掉每一个元素的换行符







///////////////////////
    第4章
///////////////////////

如果定义了两个重名的子程序，后面的子程序会覆盖前面的那个
子程序中最后一次运算结果都会被自动当成子程序的返回值
调用子程序的参数列表被存在数组@_里面

my不加括号时，只能用来声明单个词法变量
    my $fred,$barney; #错误，没有声明$barney
    my ($fred,$barney); #连个都声明了

单写一个return不给任何参数，在标量上下文中的返回值是undef，在列表上下文中则是空列表

使用state操作符来声明变量，便可以在子程序的多次调用期间保留变量之前的值，
并将变量的作用域局限于子程序内部
    sub marine {
        state $n = 0;
        $n += 1;
    }

    不能在列表上下文中初始化数组和哈希类型的state变量
        state @line = qw/ li zhang /; #错误










///////////////////////
    第5章
///////////////////////

读取标准输入
    当读到文件结尾时,返回undef
        while (defined($line = <STDIN>)) (
            print "I saw $line";
        )

        while (<STDIN>)) (
            print "I saw $_";
        )

        foreach (<STDIN>) {
            print "I saw $_";
        }

钻石操作符 <>
    ./my_program fred - betty
        while (<>) {
            chomp;
            print "It was $_ that I saw!\n";
        }
        会先处理文件fred,然后处理标准输入，最后处理文件betty

调用参数 @ARGV
    命令行参数会存放在数组@ARGV，钻石操作符<>会去检查这个数组,
    然后决定用那些文件，如果是空列表，就会改用标准输入流

输出到标准输出
    @array = qw(fred barney betty);
    print @array; #输出：fredbarneybetty
    print "@array"; #输出：fred barney betty

    print <>; #相当于cat
    print sort <>; #相当于sort

    print (2+3)*5;
        Perl会先输出5，print的返回值是1，乘以4后，丢掉这个乘积,
        它等于：(print(2+3))*4

用printf格式化输出
    %%  a percent sign
    %c  a character with the given number
    %s  a string
    %d  a signed integer,in decimal
    %u  an unsigned integer,in decimal
    %o  an unsigned integer,in octal
    %x  an unsigned integer,in hexadecimal
    %e  a floating-point number,in scientific notation
    %f  a floating-point number,in fixed decimal notation
    %g  a floating-point number,in %e or %f notation

printf "The items are:\n".("%10s"x@array),@array;

Perl保留的6个特殊的文件句柄名：STDIN STDOUT STDERR DATA ARGV ARGVOUT

打开文件句柄
    open CONFIG,'<','dino';
    open CONFIG,'<:encoding(UTF-8)','dino'; # 可指定编码
    open BEDROCK,'>',$file_name;
    open BEDROCK,'>>:encoding(UTF-8)',$file_name;

关闭文件句柄
    close CONFIG;

用dei处理致命错误
    if(! open LOG,'>>',"logfile") {
        die "Cannot create logfile: $!";
    }
        $!代表刻度的系统错误信息,只有在系统请求失败后的瞬间，$!的值才会有用

    if(@ARGV < 2) {
        die "Not enough argument\n";
    }
        die函数中的错误信息尾端加上换行符，就不会显示行号和文件名

用warn送出警告信息
    warn函数用法和die相同，它将信息送到标准错误流，但是他不会终止程序的运行

自动检测致命错误
    use autodie；
        从Perl 5.10开始支持，如果系统调用部分出错，autodie会自动帮助调用die

使用文件句柄
    if(! open PASSWD,"/etc/passwd") {
        die "How did you get logged in? ($!)";
    }
    while(<PASSWD>) {
        chomp;
        ...
    }

    if(! open LOG,'>>',"logfile") {
        die "Cannot create logfile: $!";
    }
    print LOG "Captain's log,stardate 3.14159\n";
    printf STDERR "%d percent complete.\n",$done/$total*100;
    printf STDERR ("%d percent complete.\n",$done/$total*100);

改变默认的文件输出句柄
    默认情况下，print、printf的输出会送到STDOUT
    可以用select操作符来改变默认的文件句柄

        select BEDROCK；
        print "I hope Mr.Slate doesn't find out about this.\n";
        print "Wilma!\n";
            把默认的文件句柄改成了BEDROCK

    一旦选择了输出用的默认文件句柄，程序会一直往那里输出
    默认文件句柄使用完之后，最好把它设回原先的默认值STDOUT

    将数据输出到文件句柄时，默认情况下都会经过缓冲处理,只要将特殊变量$|设置为1
    就会使当前的默认文件句柄在每次进行输出操作后立刻刷新缓冲区
        select LOG;
        $| = 1; #不要将LOG的内容保留在缓冲区
        select STDOUT；
        print LOG "This gets written to the LOG at once!\n";

    如果重新打开某个同名的文件句柄，Perl会自动帮你关闭原来那个

    错误信息送到文件里
        if(! open STDERR,'>>',"/home/barney/.error_log") {
            die "Can't open error log for append: $!";
        }

用say来输出
    从Perl 5.10开始，支持say函数，它和print差不多，单在打印每行内容时会自动加上换行符
        use 5.010;
        print "Hello!\n";
        print "Hello!","\n";
        say "Hello!";

标量变量中的文件句柄
    my $rock_fh;
    open $rock_fh,'<',"rock.txt" or die "Could not open rock.txt: $!";
    open my $rock_fh,'<',"rock.txt" or die "Could not open rock.txt: $!";
    while(<$rock_fh>) {
        chomp;
        ...
    }

    open my $rocks_fh,'>>',"rocks.txt" or die "Could not open rocks.txt: $!";
    foreach my $rock (qw(slate lava)) {
        say $rocks_fh $rock;
    }
    print $rocks_fh "limestone\n";

    print STDOUT;
    print $rock_fh; #错误，Perl不知道这里是否为文件句柄
    print {$rock_fh}; #默认打印$_中的内容




///////////////////////
    第6章 哈希
///////////////////////


访问哈希元素
    $family_name{'fred'} = 'flintstone';
    $family_name{'barney'} = 'rubble';

访问整个哈希
    对哈希赋值可以使用列表，列表中的元素应该为键-值对
        %some_hash = ('foo',35,'bar',12.4,2.5,'helo');

    在列表上下文中，哈希的值是简单的键-值对列表
        @any_array = %some_hash；

哈希赋值
    my %new_hash = %old_hash;
    my %inverse_hash = reverse %any_hash;
        最好在确定元哈希值是唯一的情况下使用

胖箭头 =>
    => 它是逗号的另一种写法，在任何需要逗号的地方都可以用=>代替
        my %last_name = (
            'fred' => 'flintstone',
            'dino' => undef,
            'barney' => 'rubble',
        );

    使用=>的时候可以省略键的引号，左边的部分会被自动引起
        my %last_name = (
            fred => 'flintstone',
            dino => undef,
            barney => 'rubble',
        );

    如果键是裸字的话，可以省略花括号中的引号
        $score{'fred'} 简写为 $score{fred}
        $hash{bar.foo} = 1; #构成键名'barfoo'

哈希函数
    keys和values函数
        keys函数能返回哈希的键列表，而values函数能返回对应的值列表
        如果哈希没有任何成员，则两个函数都返回空列表

        my %hash = ('a' => 1, 'b' => 2, 'c' => 3);
        my @K = keys $hash;
        my @v = values %hash;

        在标量上下文中，这两个函数都会返回哈希中元素(键-值对)的个数
        my $count = keys %hash; #得到3

        if(%hash) {
            print "That was a true value!\n";
        }
            只要哈希中至少有一个键-值对，就会返回真

    each函数
        while (($key,$value) = each %hash) {
            print "$key => $value\n";
        }

        foreach $key (sort keys %hash) {
            $value = $hash{$key};
            print "$key => $value\n";
        }

    exists函数
        检查哈希中是否存在某个键,和键对应的值没有关系
        if(exists $books{'dino'}) {
            print "Hey,there's a library card for dino!\n";
        }

    delete函数
        可以从哈希中删除指定的键及其对应的值
        若果没有这样的键，它就会直接结束，而不会出现任何警告或错误信息
            delete $books{'betty'};

%ENV哈希
    %ENV保存当前环境变量
        print "PATH is $ENV{PATH}\n";










///////////////////////
    第7章 漫游正则表达式王国
///////////////////////


使用简单模式
    $_ = "yabba dabba doo";
    if(/abba/) {
        print "It matched!\n";
    }

Unicode属性
    匹配带有空白符属性的字符
        if(/\p{Space}/) { #总共有26个不同的字符带此属性
            print "The string has some whitespace.\n";
        }

    匹配带有数字属性的字符
        if(/\p{Digit}/) { #总共有411个不同的数字字符
            print "The string has a digit.\n";
        }

    匹配十六进制数字的字符集合[0-9A-Fa-f]
        if(/\p{Hex}\P{Hex}/) { #匹配连续两个十六进制数
            print "The string has a pair of hex digits.\n";
        }

    匹配不包含特定属性的字符，只要把小写的p改成大写的P，就表示否定意义
        if(/\P{Space}/) { #只要不是空白符都能匹配
            print "The string has one or more non-whitespace characters.\n";
        }

关于元字符
    . 匹配任意一个字符的通配符，换行符(\n)除外
        如果要匹配.自身，则在前面加上反斜线: \.
        如果要匹配\自身，则用两个反斜线: \\

简单的量词
    * 匹配前面的条目零次或多次
        .* 匹配除换行符意外的任意字符零次或多次
    + 匹配前面的条目一次以上
    ? 匹配前面的条目零次或多次

模式分组 ()
    /(fred)+/ 会匹配像fredfredfred这样的字符串
    /(.)\1/     匹配连续两个相同的字符

    从Perl 5.10开始，支持\g{N}的写法来反向引用,N可以为负数，表示相对位置
        use 5.010;
        $_ = "aa11bb";
        if(/(.)\g{1}11/) {
            print "It matched!\n";
        }

        if(/(.)\g{-1}11/) {
            print "It matched!\n";
        }

择一匹配 |
    /fred|barney|betty/ 能匹配任何含有fred或barney或betty的字符串

字符集 []
    [abcwxyz]   匹配这7个字符中的任意一个
    [a-cw-z]    和上面一样
    [^def]      匹配这三个字符以外的任何字符
    [^n\-z]     匹配n - z以外的任何字符

字符集简写
    \d  表示任意一个数字的字符集
        Perl 5.14开始，当需要严格按照ASCII的范围来匹配数字字符时，可以选用修饰符/a
        use 5.014;
        if(/HAL-[\d]+/a) # 按老的ASCII字符语义解释

    \s  表示匹配任意空白符,效果上大抵等同于\p{Space}
        Perl 5.10还增加了范围更小的空白符集
        \h  匹配水平空白符
        \v  匹配垂直空白符
            \h和\v并起来，就成了\p{Space}

    \R  Perl 5.10中还引入，匹配任意一种断行符，不管是什么操作系统
        \R总会匹配表示断行的那个字符，不管是\r\n还是\n

    \w  ASCII语义下相当于[a-zA-Z0-9_],数字、字母加下划线

    \N  Perl 5.12引入\N表示\n的否定，等同于[^\n]

反义简写
    \D \W \S    匹配相应小写版本范围以外的字符

    [\d\D]  匹配任意字符，包括换行符而"."只能匹配换行符以外的所有字符










///////////////////////
    第8章 用正则表达式进行匹配
///////////////////////

用m//进行匹配
    第七章用到的/fred/匹配其实是m/fred/的简写,可以选择其他的定界符
    m(fred) m%fred% m{fred} m<fred> m!fred! m,fred, 等等

模式匹配修饰符
    /a  按ASCII语义解释
    /i  进行大小写无关的匹配
    /s  默认.匹配除换行符之外的任意字符，/s修饰符可以让.匹配任意字符
        包括换行符，等同于[\d\D],可以用[^\n]表示除换行符之外的字符
    /x  允许在模式里面随意加入空白符，Perl会忽略
        如果要匹配空白符的话，可以使用\t \s，或在空格前面加上反斜线
        Perl还会把模式中的注释当做空白符直接忽略
            /
                -?      # 一个可以可无的减号
                [0-9]+  # 一个或多个数字
                \.?     # 可有可无的小数点
                [0-9]*  # 数字
            /x
                注释部分不要使用定界符

选择一种字符解释方式
    Perl 5.14增加了一些用于通知Perl如何解释字符意义的修饰符
        /a  采取ASCII方式
        /u  采取Unicode方式
        /l  遵从本地化语言的设定
        /aa 进一步表示仅仅采取ASCII方式的大小写映射处理

锚位
    \A  匹配字符串的绝对开头
        m{\Ahttps?://}i
    \z  匹配字符串的绝对末尾
        m{\.png\z}i
    \Z  匹配行末，允许后面出现换行符

    ^   匹配字符串的绝对开头
    $   匹配字符串的绝对末尾
        ^ $和/m修饰符一起时，表示匹配行首和行尾，可进行多行匹配
            /fred$/m    匹配多行文本中行尾的fred
            /^barney/m  匹配多行文本中行首的barney

单词锚位
    \b  能匹配任何单词的首和尾
        这里所说的单词是由一组\w组成的字符集，包括字母、数字和下划线

绑定操作符 =~
    默认情况下模式匹配的操作对象是$_，绑定操作符告诉Perl
    拿右边的模式来匹配左边的字符串
        $some_other = "I dream of betty rubble";
        if(%some_other =~ /\brub/)
            匹配结果会返回一个布尔值

模式中的内插
    my $what = "larry";
    while(<>) {
        if(/\A($what)/) {
            print "$what in beginning of $_";
        }
    }

捕获变量
    正则表达式匹配的捕获内容存在$1 $2这样的变量中
    这些捕获变量通常能存活到下次成功匹配
    如果下次匹配失败，则不会覆盖上次匹配的内容
        my $dino = "I fear that I'll extinct after 1000 years.";
        if($dino =~ /[0-9]*/) {
            print "That's said $1 years.\n";
        }

    不捕获模式
        在左括号后面加上 ?:
        if(/(?:bronto)?saurus (steak|burger)/) {
            print "Fred wants $1 \n"; # $1是steak或burger
        }

    命名捕获
        Perl 5.10增加了对捕获内容直接命名的写法
        捕获到的内容会保存在特殊哈希%+里面，其键就是在捕获时用的特殊标签
        捕获命名的写法：(?<LABEL>PATTERN)
            use 5.010;
            my $names = "Fred or Barney";
            if($names =~ m/(?<name1>\w+) (?:and|or) (?<name2>\w+)/) {
                say "I saw $+{name1} and $+{name2}";
            }

        在使用捕获标签后，之前反向引用\1或者\g{1}可以写成\g{label}

    自动捕获变量 $` $& $'
        if("hello there, neighbor" =~ /\s(\w+),/) {
            print "That actually matched $&"
        }
            $&匹配了一个空格，单词there，和一个逗号
            $`保存匹配区段之前的内容：hello
            $'保存匹配区段之后的内容：一个空格加上neighbor

            一旦程序中的任何部分使用了这些自动捕获变量，其他正则表达式的速度也会变慢

        Perl 5.10以后，修饰符/p会启动类似的自动捕获变量
        它们的名字不再是$` $& $' 而是：
        ${^PREMATCH}
        ${^MATCH}
        ${^POSTMATCH}

通用量词
    /a{5,15}/   匹配重复出现5到15次的字母a
    /(fred){3,}/匹配重复出现3次以上的fred
    /\w{8}/     匹配正好有8个单词字符的字符串

    * = {0,}
    + = {1,}
    ? = {0,1}

优先级
    1.最高优先级是圆括号()
    2.第二级是量词，比如 * + ? {3,5}
    3.第三级是锚位和序列，比如 \A \z \Z ^ $ \b
    4.第四级是择一竖线 |
    5.最低级称为原子，比如单独的字符，字符集，反引用等等




///////////////////////
    第9章
///////////////////////
















