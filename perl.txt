
use diagnostics
    编译报告更为详尽的问题描述

use strict
    强制使用更严格的约束规则
    从Perl 5.12开始，使用了 use 5.012 就会自动加载strict编译指令

$_
    print的默认变量
    foreach的默认控制变量





///////////////////////
    第2章
///////////////////////

perl -v
    查看perl的版本

数字表示方式：
    在perl内部，总是按双精度浮点数的要求来保存数字并进行运算的
    63
    -46
    36e8
    12345678 = 1234_5678
    1.25
    255.00
    7.25e5
    -2.5e2
    -3.5e-8
    -1.3E-4

    0377 八进制数，等于十进制的255
    0xff 十六进制数，等于十进制的255
    0b1111_1111 二进制数，等于十进制的255

    2+3
    5.1-3.4
    3*5
    14/2.3
    10%3    取模
    2**8    乘方

单引号内的所有字符都代表他们自己，除了单引号和反斜线外
    \' 表示单引号
    \\ 表示反斜线

字符串操作符
    . 连接操作符
        "hello"."world"     = "helloworld"
        "hello".' '."world" = "hello world"
        'hello world'."\n"  = "hello world\n"

    x 重复操作符
        "fred"x3 = "fredfredfred"
        5x4      = "5555"

use diagnostics
    编译报告更为详尽的问题描述

${what}s
    可以用花括号把变量名括起来，避免歧义

$omega = chr(0x03C9)
    把代码点转换成字符

    或直接在双引号内用\x{}
        "\x{03B1}\x{033C9}"

$code_point = ord('?')
    把字符转换成代码点

比较操作符
    比较        数字    字符串
    相等        ==      eq
    不等        !=      ne
    小于        <       lt
    大于        >       gt
    小于或等于  <=      le
    大于或等于  >=      ge

if控制结构
    if () {

    }

    if () {

    }else{

    }

    if () {

    }elsif () {

    }else {

    }


    在判断时
        如果是数字，0为假，所有其他数字都为真
        如果是字符串，空字符串（''）为假，其他所有字符串为真
        如果既不是数字也不是字符串，那就先转化成数字或字符串在进行判断
        '0'是唯一被当成假的空字符串，'0'跟数字0是同一个标量

<STDIN>
    从标准输入读取一行文本，直到换行符为止

chomp
    去掉字符串末尾的一个换行符,返回值是实际移除的字符个数

while控制结构
    while () {

    }

undef值
    变量的初始值是特殊的undef
    当成数字使用，表现是0
    当成字符串使用，表现是空字符串（''）

defined函数
    要判断某个字符串是undef而不是空字符串，可以使用defined函数
    如果是undef，该函数返回假，否则返回真

    应用：
        行输入操作符<STDIN>有时候会返回undef。在一般情况下他会返回一行文本，
        但若没有更多输入，比如读到文件结尾(end-of-file)时，他就会返回undef。

        $madonna = <STDIN>;
        if(defined($madonna)) {
            print "The input was $madonna";
        } else {
            print "No input available!\n";
        }

$madonna = undef;
    创建undef值






///////////////////////
    第3章
///////////////////////

$fred[0] = "zhang";
$fred[1] = "li";
    数组元素

有数组rocks，它的最后一个元素的索引值是$#rocks,这个数值比数组元素的个数少1，因为还有一个编号0的元素
$rocks[-1]  数组的最后一个元素
$rocks[-2]  数组的倒数第二个元素

列表直接量
    (1,2,3)
    ("fred",4.5)
    (1..100)    100个整数构成的列表
    (5..1)  空列表，..只能向上计数
    ("fred","barney","betty")
    qw(fred barney betty) = qw# fred barney berry #
        在qw构建的列表中，不能像双引号内的字符串一样使用\n或$fred
        perl会将其当成单引号内的字符串来处理，并忽略空白符（如空格，制表符，换行符）
        允许其他的定界符
    qw(
        fred
        barney
        betty
    )

列表的赋值
    ($fred,$barney,$dino) = ("stone","rubble",undef)
    ($fred,$barney) = ($barney,$fred)   交换两个变量的值
    @rock = qw/ bed slate lava /
    @copy = @quarry

pop操作符
    它负责取出数组中最后一个元素并将其作为返回值返回

    @array = 5..9;
    $fred = pop(@array); #$fred变成9，@array现在是(5,6,7,8)
    pop @array; #删除数组最后一个元素

push操作符
    添加一个元素到数组末端

    push(@array,0); #@array现在是(5,6,7,0)
    @other = qw/ 2 3 /
    pop @array,@other;  #@array现在是(5,6,7,0,2,3)
    pop @array,1..5;

shift、unshift操作符
    对数组的开头进行处理

    @array = qw/ 4 5 /
    $m = shift(@array);  #@array变成(5)
    unshift @array,1..3;    #@array变成(1,2,3,5)

splice操作符
    可以对数组的中间元素进行操作

    第一个参数是目标数组
    第二个参数是数组元素的起始位置
        只给两个参数时，把从开始一直到末尾的元素全部取出来并返回

    第三个参数是要操作的长度，不是结束位置
        只给三个参数时，删除一个数组片段

    第四个参数是要替换的列表

    如果把第三个参数设置为0，那么会在起始位置之前添加列表

foreach控制结构
    foreach $element (qw/ li zhag/) {

    }

    控制变量并不是列表元素的复制品，他就是列表元素本身
    如果循环中修改了控制变量的值，也就同时修改了这个列表元素

    foreach $rock (@rocks) {
        $rock = "\t$rock";
        $rock .= "\n";
    }
        在@rocks的每一个元素前加上制表符，同时在末尾加上换行符

    循环结束后，控制变量任然是循环前的值，所以不用担心之前用过同名的变量

reverse操作符
    读取列表的值(也可能来自数组)，并按相反的次序返回该列表

    @wilma = reverse 1..5; #可以弥补..只能递增的不足

    reverse @wilma; #错误用法
    @wilma = reverse @wilma; #正确
        reverse返回相反的列表，但是并不会修改传进来的参数

sort操作符
    对列表按照Unicode进行排序,并返回列表

    @number = sort 97..102; #得100,101,102,97,98,99
        以1开头的字符串会排在以9开头的字符串的前面

    sort @rock；#错误用法
    @rock = sort @rock；#正确

each操作符
    从Perl 5.12开始，可以对数组使用each操作符。

    use 5.012;
    while(my($index,$value) = each @rocks) {
        say "$index；$value";
    }

    foreach $index (0..$#rocks) {
        print "$index:$rocks[$index]\n";
    }

sort在标量上下文中返回undef
reverse在标量上下文中返回逆序后的字符串
    $line = reverse qw/ yabba dabba doo /; #得到oodabbadabbay

@wilma = undef; #得到一个仅有一个元素的列表
@betty = (); #清空数组的办法

强制指定标量上下文 scalar
    print "I have",scalar @rocks," rocks\n";

@line = <STDIN>;
    若果输入是文件，会读取所有行，每一行是一个列表元素
    如果输入来自键盘，可以用control+d表示输入结束

chomp(@line = <STDIN>);
    会去掉每一个元素的换行符







///////////////////////
    第4章
///////////////////////

如果定义了两个重名的子程序，后面的子程序会覆盖前面的那个
子程序中最后一次运算结果都会被自动当成子程序的返回值
调用子程序的参数列表被存在数组@_里面

my不加括号时，只能用来声明单个词法变量
    my $fred,$barney; #错误，没有声明$barney
    my ($fred,$barney); #连个都声明了

单写一个return不给任何参数，在标量上下文中的返回值是undef，在列表上下文中则是空列表

使用state操作符来声明变量，便可以在子程序的多次调用期间保留变量之前的值，
并将变量的作用域局限于子程序内部
    sub marine {
        state $n = 0;
        $n += 1;
    }

    不能在列表上下文中初始化数组和哈希类型的state变量
        state @line = qw/ li zhang /; #错误










///////////////////////
    第5章
///////////////////////

读取标准输入
    当读到文件结尾时,返回undef
        while (defined($line = <STDIN>)) (
            print "I saw $line";
        )

        while (<STDIN>)) (
            print "I saw $_";
        )

        foreach (<STDIN>) {
            print "I saw $_";
        }

钻石操作符 <>
    ./my_program fred - betty
        while (<>) {
            chomp;
            print "It was $_ that I saw!\n";
        }
        会先处理文件fred,然后处理标准输入，最后处理文件betty

调用参数 @ARGV
    命令行参数会存放在数组@ARGV，钻石操作符<>会去检查这个数组,
    然后决定用那些文件，如果是空列表，就会改用标准输入流

输出到标准输出
    @array = qw(fred barney betty);
    print @array; #输出：fredbarneybetty
    print "@array"; #输出：fred barney betty

    print <>; #相当于cat
    print sort <>; #相当于sort

    print (2+3)*5;
        Perl会先输出5，print的返回值是1，乘以4后，丢掉这个乘积,
        它等于：(print(2+3))*4

用printf格式化输出
    %%  a percent sign
    %c  a character with the given number
    %s  a string
    %d  a signed integer,in decimal
    %u  an unsigned integer,in decimal
    %o  an unsigned integer,in octal
    %x  an unsigned integer,in hexadecimal
    %e  a floating-point number,in scientific notation
    %f  a floating-point number,in fixed decimal notation
    %g  a floating-point number,in %e or %f notation

printf "The items are:\n".("%10s"x@array),@array;

Perl保留的6个特殊的文件句柄名：STDIN STDOUT STDERR DATA ARGV ARGVOUT

打开文件句柄
    open CONFIG,'<','dino';
    open CONFIG,'<:encoding(UTF-8)','dino'; # 可指定编码
    open BEDROCK,'>',$file_name;
    open BEDROCK,'>>:encoding(UTF-8)',$file_name;

关闭文件句柄
    close CONFIG;

用die处理致命错误
    if(! open LOG,'>>',"logfile") {
        die "Cannot create logfile: $!";
    }
        $!代表刻度的系统错误信息,只有在系统请求失败后的瞬间，$!的值才会有用

    if(@ARGV < 2) {
        die "Not enough argument\n";
    }
        die函数中的错误信息尾端加上换行符，就不会显示行号和文件名

用warn送出警告信息
    warn函数用法和die相同，它将信息送到标准错误流，但是他不会终止程序的运行

自动检测致命错误
    use autodie；
        从Perl 5.10开始支持，如果系统调用部分出错，autodie会自动帮助调用die

使用文件句柄
    if(! open PASSWD,"/etc/passwd") {
        die "How did you get logged in? ($!)";
    }
    while(<PASSWD>) {
        chomp;
        ...
    }

    if(! open LOG,'>>',"logfile") {
        die "Cannot create logfile: $!";
    }
    print LOG "Captain's log,stardate 3.14159\n";
    printf STDERR "%d percent complete.\n",$done/$total*100;
    printf STDERR ("%d percent complete.\n",$done/$total*100);

改变默认的文件输出句柄
    默认情况下，print、printf的输出会送到STDOUT
    可以用select操作符来改变默认的文件句柄

        select BEDROCK；
        print "I hope Mr.Slate doesn't find out about this.\n";
        print "Wilma!\n";
            把默认的文件句柄改成了BEDROCK

    一旦选择了输出用的默认文件句柄，程序会一直往那里输出
    默认文件句柄使用完之后，最好把它设回原先的默认值STDOUT

    将数据输出到文件句柄时，默认情况下都会经过缓冲处理,只要将特殊变量$|设置为1
    就会使当前的默认文件句柄在每次进行输出操作后立刻刷新缓冲区
        select LOG;
        $| = 1; #不要将LOG的内容保留在缓冲区
        select STDOUT；
        print LOG "This gets written to the LOG at once!\n";

    如果重新打开某个同名的文件句柄，Perl会自动帮你关闭原来那个

    错误信息送到文件里
        if(! open STDERR,'>>',"/home/barney/.error_log") {
            die "Can't open error log for append: $!";
        }

用say来输出
    从Perl 5.10开始，支持say函数，它和print差不多，单在打印每行内容时会自动加上换行符
        use 5.010;
        print "Hello!\n";
        print "Hello!","\n";
        say "Hello!";

标量变量中的文件句柄
    my $rock_fh;
    open $rock_fh,'<',"rock.txt" or die "Could not open rock.txt: $!";
    open my $rock_fh,'<',"rock.txt" or die "Could not open rock.txt: $!";
    while(<$rock_fh>) {
        chomp;
        ...
    }

    open my $rocks_fh,'>>',"rocks.txt" or die "Could not open rocks.txt: $!";
    foreach my $rock (qw(slate lava)) {
        say $rocks_fh $rock;
    }
    print $rocks_fh "limestone\n";

    print STDOUT;
    print $rock_fh; #错误，Perl不知道这里是否为文件句柄
    print {$rock_fh}; #默认打印$_中的内容




///////////////////////
    第6章 哈希
///////////////////////


访问哈希元素
    $family_name{'fred'} = 'flintstone';
    $family_name{'barney'} = 'rubble';

访问整个哈希
    对哈希赋值可以使用列表，列表中的元素应该为键-值对
        %some_hash = ('foo',35,'bar',12.4,2.5,'helo');

    在列表上下文中，哈希的值是简单的键-值对列表
        @any_array = %some_hash；

哈希赋值
    my %new_hash = %old_hash;
    my %inverse_hash = reverse %any_hash;
        最好在确定元哈希值是唯一的情况下使用

胖箭头 =>
    => 它是逗号的另一种写法，在任何需要逗号的地方都可以用=>代替
        my %last_name = (
            'fred' => 'flintstone',
            'dino' => undef,
            'barney' => 'rubble',
        );

    使用=>的时候可以省略键的引号，左边的部分会被自动引起
        my %last_name = (
            fred => 'flintstone',
            dino => undef,
            barney => 'rubble',
        );

    如果键是裸字的话，可以省略花括号中的引号
        $score{'fred'} 简写为 $score{fred}
        $hash{bar.foo} = 1; #构成键名'barfoo'

哈希函数
    keys和values函数
        keys函数能返回哈希的键列表，而values函数能返回对应的值列表
        如果哈希没有任何成员，则两个函数都返回空列表

        my %hash = ('a' => 1, 'b' => 2, 'c' => 3);
        my @K = keys $hash;
        my @v = values %hash;

        在标量上下文中，这两个函数都会返回哈希中元素(键-值对)的个数
        my $count = keys %hash; #得到3

        if(%hash) {
            print "That was a true value!\n";
        }
            只要哈希中至少有一个键-值对，就会返回真

    each函数
        while (($key,$value) = each %hash) {
            print "$key => $value\n";
        }

        foreach $key (sort keys %hash) {
            $value = $hash{$key};
            print "$key => $value\n";
        }

    exists函数
        检查哈希中是否存在某个键,和键对应的值没有关系
        if(exists $books{'dino'}) {
            print "Hey,there's a library card for dino!\n";
        }

    delete函数
        可以从哈希中删除指定的键及其对应的值
        若果没有这样的键，它就会直接结束，而不会出现任何警告或错误信息
            delete $books{'betty'};

%ENV哈希
    %ENV保存当前环境变量
        print "PATH is $ENV{PATH}\n";










///////////////////////
    第7章 漫游正则表达式王国
///////////////////////


使用简单模式
    $_ = "yabba dabba doo";
    if(/abba/) {
        print "It matched!\n";
    }

Unicode属性
    匹配带有空白符属性的字符
        if(/\p{Space}/) { #总共有26个不同的字符带此属性
            print "The string has some whitespace.\n";
        }

    匹配带有数字属性的字符
        if(/\p{Digit}/) { #总共有411个不同的数字字符
            print "The string has a digit.\n";
        }

    匹配十六进制数字的字符集合[0-9A-Fa-f]
        if(/\p{Hex}\P{Hex}/) { #匹配连续两个十六进制数
            print "The string has a pair of hex digits.\n";
        }

    匹配不包含特定属性的字符，只要把小写的p改成大写的P，就表示否定意义
        if(/\P{Space}/) { #只要不是空白符都能匹配
            print "The string has one or more non-whitespace characters.\n";
        }

关于元字符
    . 匹配任意一个字符的通配符，换行符(\n)除外
        如果要匹配.自身，则在前面加上反斜线: \.
        如果要匹配\自身，则用两个反斜线: \\

简单的量词
    * 匹配前面的条目零次或多次
        .* 匹配除换行符意外的任意字符零次或多次
    + 匹配前面的条目一次以上
    ? 匹配前面的条目零次或多次

模式分组 ()
    /(fred)+/ 会匹配像fredfredfred这样的字符串
    /(.)\1/     匹配连续两个相同的字符

    从Perl 5.10开始，支持\g{N}的写法来反向引用,N可以为负数，表示相对位置
        use 5.010;
        $_ = "aa11bb";
        if(/(.)\g{1}11/) {
            print "It matched!\n";
        }

        if(/(.)\g{-1}11/) {
            print "It matched!\n";
        }

择一匹配 |
    /fred|barney|betty/ 能匹配任何含有fred或barney或betty的字符串

字符集 []
    [abcwxyz]   匹配这7个字符中的任意一个
    [a-cw-z]    和上面一样
    [^def]      匹配这三个字符以外的任何字符
    [^n\-z]     匹配n - z以外的任何字符

字符集简写
    \d  表示任意一个数字的字符集
        Perl 5.14开始，当需要严格按照ASCII的范围来匹配数字字符时，可以选用修饰符/a
        use 5.014;
        if(/HAL-[\d]+/a) # 按老的ASCII字符语义解释

    \s  表示匹配任意空白符,效果上大抵等同于\p{Space}
        Perl 5.10还增加了范围更小的空白符集
        \h  匹配水平空白符
        \v  匹配垂直空白符
            \h和\v并起来，就成了\p{Space}

    \R  Perl 5.10中还引入，匹配任意一种断行符，不管是什么操作系统
        \R总会匹配表示断行的那个字符，不管是\r\n还是\n

    \w  ASCII语义下相当于[a-zA-Z0-9_],数字、字母加下划线

    \N  Perl 5.12引入\N表示\n的否定，等同于[^\n]

反义简写
    \D \W \S    匹配相应小写版本范围以外的字符

    [\d\D]  匹配任意字符，包括换行符而"."只能匹配换行符以外的所有字符










///////////////////////
    第8章 用正则表达式进行匹配
///////////////////////

用m//进行匹配
    第七章用到的/fred/匹配其实是m/fred/的简写,可以选择其他的定界符
    m(fred) m%fred% m{fred} m<fred> m!fred! m,fred, 等等

模式匹配修饰符
    /a  按ASCII语义解释
    /i  进行大小写无关的匹配
    /s  默认.匹配除换行符之外的任意字符，/s修饰符可以让.匹配任意字符
        包括换行符，等同于[\d\D],可以用[^\n]表示除换行符之外的字符
    /x  允许在模式里面随意加入空白符，Perl会忽略
        如果要匹配空白符的话，可以使用\t \s，或在空格前面加上反斜线
        Perl还会把模式中的注释当做空白符直接忽略
            /
                -?      # 一个可以可无的减号
                [0-9]+  # 一个或多个数字
                \.?     # 可有可无的小数点
                [0-9]*  # 数字
            /x
                注释部分不要使用定界符

选择一种字符解释方式
    Perl 5.14增加了一些用于通知Perl如何解释字符意义的修饰符
        /a  采取ASCII方式
        /u  采取Unicode方式
        /l  遵从本地化语言的设定
        /aa 进一步表示仅仅采取ASCII方式的大小写映射处理

锚位
    \A  匹配字符串的绝对开头
        m{\Ahttps?://}i
    \z  匹配字符串的绝对末尾
        m{\.png\z}i
    \Z  匹配行末，允许后面出现换行符

    ^   匹配字符串的绝对开头
    $   匹配字符串的绝对末尾
        ^ $和/m修饰符一起时，表示匹配行首和行尾，可进行多行匹配
            /fred$/m    匹配多行文本中行尾的fred
            /^barney/m  匹配多行文本中行首的barney

单词锚位
    \b  能匹配任何单词的首和尾
        这里所说的单词是由一组\w组成的字符集，包括字母、数字和下划线

绑定操作符 =~
    默认情况下模式匹配的操作对象是$_，绑定操作符告诉Perl
    拿右边的模式来匹配左边的字符串
        $some_other = "I dream of betty rubble";
        if(%some_other =~ /\brub/)
            匹配结果会返回一个布尔值

模式中的内插
    my $what = "larry";
    while(<>) {
        if(/\A($what)/) {
            print "$what in beginning of $_";
        }
    }

捕获变量
    正则表达式匹配的捕获内容存在$1 $2这样的变量中
    这些捕获变量通常能存活到下次成功匹配
    如果下次匹配失败，则不会覆盖上次匹配的内容
        my $dino = "I fear that I'll extinct after 1000 years.";
        if($dino =~ /[0-9]*/) {
            print "That's said $1 years.\n";
        }

    不捕获模式
        在左括号后面加上 ?:
        if(/(?:bronto)?saurus (steak|burger)/) {
            print "Fred wants $1 \n"; # $1是steak或burger
        }

    命名捕获
        Perl 5.10增加了对捕获内容直接命名的写法
        捕获到的内容会保存在特殊哈希%+里面，其键就是在捕获时用的特殊标签
        捕获命名的写法：(?<LABEL>PATTERN)
            use 5.010;
            my $names = "Fred or Barney";
            if($names =~ m/(?<name1>\w+) (?:and|or) (?<name2>\w+)/) {
                say "I saw $+{name1} and $+{name2}";
            }

        在使用捕获标签后，之前反向引用\1或者\g{1}可以写成\g{label}

    自动捕获变量 $` $& $'
        if("hello there, neighbor" =~ /\s(\w+),/) {
            print "That actually matched $&"
        }
            $&匹配了一个空格，单词there，和一个逗号
            $`保存匹配区段之前的内容：hello
            $'保存匹配区段之后的内容：一个空格加上neighbor

            一旦程序中的任何部分使用了这些自动捕获变量，其他正则表达式的速度也会变慢

        Perl 5.10以后，修饰符/p会启动类似的自动捕获变量
        它们的名字不再是$` $& $' 而是：
        ${^PREMATCH}
        ${^MATCH}
        ${^POSTMATCH}

通用量词
    /a{5,15}/   匹配重复出现5到15次的字母a
    /(fred){3,}/匹配重复出现3次以上的fred
    /\w{8}/     匹配正好有8个单词字符的字符串

    * = {0,}
    + = {1,}
    ? = {0,1}

优先级
    1.最高优先级是圆括号()
    2.第二级是量词，比如 * + ? {3,5}
    3.第三级是锚位和序列，比如 \A \z \Z ^ $ \b
    4.第四级是择一竖线 |
    5.最低级称为原子，比如单独的字符，字符集，反引用等等




///////////////////////
    第9章 用正则表达式处理文本
///////////////////////


用s///进行替换
    $_ = "He's out bowling with Barney tonight.";
    s/Barnet/Fred/;
    print "$_\n";

    s///返回的是布尔值，替换成功时为真，否则为假
    s///默认只会进行一次替换


    用/g进行全局替换
        $_ = "home, sweet home!";
        s/home/cave/g;
        print "$_\n"; #打印"cave, sweet cave!"

        缩减空白
            s/\s+/ /g;

        将开头的空白替换成空字符串
            s/^\s+//;

        将结尾的空白替换成空字符串
            s/\s+$//;

        s/^\s+|\s+$//g

    不同的定界符
        想m//和qw//一样，s///也可以用其他定界符
            s#^https://#http://#
            s{fred}{barney}
            s[fred]{bayney}
            s<fred>#barney#

    无损替换
        Perl 5.14 增加了/r修饰符，原先s///操作完成后返回的是成功替换的次数，加上/r之后
        就会保留原来字符串变量中的值不变，而把替换结果作为替换操作的返回值返回

        my $original = 'Fred ate 1 rib';
        my $copy = $original;
        $copy =~ s/\d+ ribs?/10 ribs/;

        use 5.014;
        my $copy = $origin =~ s/\d+ ribs?/10 ribs/r;
            和上面效果是一样的

    大小写转换
        \U  会将其后的所有字符转换成大写的
            $_ = "I saw Barney with Fred.";
            s/(fred|barney)/\U$1/gi; # 替换后$_变成"I saw BARNEY with FRED."

        \L 会将它后面的所有字符转换成小写的
            s/(fred|barney)/\L$1/gi; # 替换后$_变成"I saw barney with fred."

    默认情况下，\U \L会影响之后全部的字符串
    可以使用\E关闭大小写转换的功能
            s/(\w+) with (\w+)/\U$2\E with $1/i

    \l \u只会影响紧跟其后的第一个字符
        s/(fred|barney)/\u$1/ig; #

split操作符
    my @fields = split /separator/,$string;

    my @fields = split /:/,"adc:def:g:h"; # 得到("abc","def","g","h")

    如果两个分隔符连在一起，就会产生空字段
    但是Perl会保留开头处的空字段，舍弃结尾处的空字段
    my @fields = split /:/,"::a:b::c::"; # 得到("","","a","b","","c")

    my @args = split /\s+/,$some_input;
        把连续的空白符当做分隔字段

    默认split会以空白符分隔$_
    my @fields = split; # 等效于 split /\s+/,$_;

join函数
    my $result = join $glue,@pieces;

列表上下文中的m//
    在列表上下文中使用模式匹配操作符(m//)时，如果模式匹配成功
    那么返回的是所有捕获变量的列表；如果匹配失败，则会返回空列表

    $_ = "Hello there, neighbor!";
    my ($first,$second,$third) = /(\S+) (\S+), (\S+)/;

    my $text = "Fred dropped a 5 ton granite block on Mr.Slate";
    my @words = ($text =~ /([a-z]+)/ig;

    my %last_name = ($data =~ /(\w+)\s+(\w+)/g);
        返回一对被捕获的值，而这一对值正好为哈希的键-值对

非贪婪量词
    * + ? {3,} 都是贪婪量词，在保证整体匹配的前提下，他们会尽量匹配长字符串
    *? +? ?? {3,}? 是非贪婪量词，匹配尽可能短的字符串

跨行的模式匹配
    ^ $加上/m修饰符后，可以匹配行首和行尾

    open FILE,$filename or die "Can't open '$filename': $!";
    my $line = join ' ',<FILE>;
    $line =~ s/^/$filename: /gm;

一次更新多个文件
    $^I = ".bak";
    while (<>) {
        s/^Date:.*/Date: $date/;
    }

从命令行直接编辑
    perl -p -i.bak -w -e 's/Randall/Randal/g' fred*.dat

    #!/usr/bin/perl -w
    $^I = ".bak";
    while(<>) {
        s/Randall/Randal/g
        print;
    }
    上面两段程序效果相同







///////////////////////
    第10章 其他控制结构
///////////////////////


unless 控制结构
    在if结构中，只条件表达式为真时，才执行某块代码
    在unless结构中，当条件表达式为假时，才执行

    unless ($fred =~ /\A[A-Z_]\w*\z/i) {
        print "The value of \$fred doesn't look like a perl identifier name.\n";
    }

    unless () {

    } else {

    }

until 控制结构
    在while机构中，条件为真执行，为假不执行
    在until结构中，条件为假执行，为真不执行

    until($j > $i) {
        $j *= 2;
    }

表达式的修饰符
    print "$n is a negative number.\n" if $n < 0;
    &error("Invalid input") unless &valid($input);
    $i *= 2 until $i > $j;
    print " ",($n += 2) while $n < 10;
    &greet($_) foreach @person;
        在使用佛reach的时候，不能自选变量，只能使用$_

自增或自减
    my @people = qw/fred barney fred wilma dino barney fred pebbles/;
    my %count;
    $count{$_}++ foreach @people;

for控制结构
    for($i=1;$i<=10;$i++) {
        print "I can count to $i\n";
    }


循环控制

    last操作符
        last操作符能立即中止循环的执行
        while (<STDIN>) {
            if(/_END_/) {
                last;
            } else {
                print;
            }
        }

        在Perl中有5种循环 for foreach while until以及裸块(用花括号{}括起来的代码块)

    next操作符
        结束当前这次循环迭代，继续执行循环的下一次迭代
        while(<>) {
            foreach (split) {
                $total++;
                next if /\W/;
                $valid++;
                $count{$_}++;
            }
        }
        print "total things = $total, valid words = $valid\n";
        foreach $word (sort keys %count) {
            print "$word was seen $count{word} times.\n";
        }

    redo操作符
        它能将控制返回到当前循环块的顶端
        而不经过任何测试条件， 也不会进入下一次循环迭代

        my $words = qw/ fred barney pebbles dino wilma betty/;
        my $error = 0;
        foreach (@words) {
            print "Type the word '$_': ";
            chomp(my $try = <STDIN>);
            if($try ne $_) {
                print "Sorry - That's not right.\n\n";
                $error++;
                redo;
            }
        }
        print "You'v completed the test, whith $error errors.\n";

带标签的块
    标签应该用来命名整块代码，而不是用来标明程序中的某个具体位置

    LINE: while(<>) {
        foreach (split) {
            last LINE if /_END_/; # 跳出标签为LINE的循环
        }
    }

条件操作符 ?:
    expression ? if_true_expr : if_false_expr

    my $location = &is_weekend($day) ? "home" : "work";
    my $average  = $n ? ($total/$n) : "-----";

逻辑操作符
    and && or ||

    if($dessert{'cake'} && $dessert{'ice_cream'})
    if($dessert{'cake'} || $dessert{'ice_cream'})

    if(($n != 0) && ($total/$n < 5))

短路操作符的值
    短路操作符的值不是简单的布尔值，而是最后运算的那部分表达式的值

    my $last_name = $lastname{$someone} || '(No last name)';
        当左边是一个逻辑假值时，会出现问题

    my $last_name = defined $last_name{$someone} ? $lastname{$someone} : '(No last name)';

定义或操作符 //
    Perl 5.10引入了定义或操作符
    在发现左边的值属于已定义时进行短路操作，而不管该是属于逻辑真还是逻辑假

    use 5.010；
    my $last_name = $lastname{$someone} // '(No last name)';







///////////////////////
    第11章 Perl 模块
///////////////////////

File::Basename 模块
    use File::Basename;
    my $name = "/usr/local/bin/perl";
    my $basename = basename $name;

    dirname

    仅选用模块中的部分函数
        use File::Basename qw/ basename /;

        use File::Basename (); #不导入任何函数，在使用时用全名调用函数
        my $dirname = File::Basename::dirname $name;

File:Spec模块
    File::Spec 是面向对象的，必须通过File::Spec的全名方式来调用方法

    use File::Spec;
    my $new_name = File::Spec->catfile($dirname,$basename);
    rename($old_name,$new_name) or warn "Can't rename";

Path::Class模块 Perl自带的模块
    my $dir = dir(qw/ users fred lib /);
    my $subdir = $dir ->subdir("perl5"); # user/fred/lib/perl5
    my $parent = $dir ->parent; # user/fred

    my $windir = $dir ->as_foreign('Win32'); # user\fred\lib










///////////////////////
    第12章  文件测试
///////////////////////


文件测试操作符
    文件测试操作符  意义
    -r              文件或目录，对目前用户或组来说是可读的
    -w              文件或目录，对目前用户或组来说是可写的
    -x              文件或目录，对目前用户或组来说是可执行的
    -o              文件或目录，由目前用户拥有
    -R              文件或目录，对实际的用户或组来说是可读的
    -W              文件或目录，对实际的用户或组来说是可写的
    -X              文件或目录，对实际的用户或组来说是可执行的
    -O              文件或目录，由实际的用户拥有
    -e              文件或目录，是存在的
    -z              文件存在而且没有内容(对目录来说永远是假)
    -s              文件或目录存在而且有内容(返回值是以字节为单位的文件大小)
    -f              是普通文件
    -d              是目录
    -l              是符号链接
    -S              是socket类型的文件
    -p              是命名管道，也就是先入先出(fifo)队列
    -b              是块设备文件(比如某个可挂载的磁盘)
    -c              是字符设备文件(比如某个I/O设备)
    -u              文件或目录设置了setuid位
    -g              文件或目录设置了setgid位
    -k              文件或目录设置了sticky位
    -t              文件句柄是TTY设备(类似系统函数isatty()的测试，不能对文件名进行次测试)
    -T              看起来像文本文件
    -B              看起来像二进制文件
    -M              最后一次被修改后至今的天数
    -A              最后一次被访问后至今的天数
    -C              最后一次文件节点编号(inode)被变更后至今的天数

        my $size_in_k = (-s) / 1024;

测试同一文件的多项属性
    if(-r $file and -w $file)
        非常耗费资源的操作

    if(-r $file and -w _)
        虚拟文件句柄 _ 用上次查询过的文件信息来做当前测试

    if(-r $file) {

    }
    if(-w _) {

    }

栈式文件测试操作符
    Perl 5.10之后支持

    use 5.010;
    if(-w -r $file)
        靠近文件名的测试会先执行

    if(-s -d $file <512) = if((-d $file and -s _) < 512)
        这种用法可能与使用初衷不符
    if(-d $file and -s _ < 512)

stat和lstat函数
    stat的参数可以是文件句柄(包括虚拟文件句柄_)或是某个返回文件名的表达式

    my($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,$blksize,$blocks) = stat($filename);

    对符号连接名调用stat函数将会返回符号链接指向对象的信息
    而非符号链接本身的信息
    若需要符号链接本身的信息，可以使用lstat函数

localtime函数
    my $timestamp = 1180630098;
    my $date - localtime $timestamp;

    在列表上下文中，localtime会返回一个数字元素组成的列表
    my($sec,$min,$hour,$day,$mon,$year,$wday,$yday,$isday) = localtime $timestamp;

    gmtime它返回的是世界标准时间
    my $now = gmtime;

按位运算操作符
    表达式      意义
    10 & 12     按位与--哪些位在两边同时为真
    10 | 12     按位或--哪些位在任一边为真
    10 ^ 12     按位异或--哪些位在任意一边为真，但不能两边都为真
    6 << 2      按位左移，将左边的操作数向左边移动位数，移动位数由右边的操作数指定
                并以0来填补最低有效位
    25 >> 2     按位右移，将左边的操作数向右边移动位数，移动位数由右边的操作数指定
                并丢弃移出的最低有效位
    ~10         按位取反，也称为去反码--返回操作数逐位取反之后的数值
















///////////////////////
    第13章 目录操作
///////////////////////

在目录树中移动
    chdir '/etc' or die "cannot chdir to /etc: $!";
        改变当前工作目录

文件名通配
    my @all_files = glob '*';
        取得当前目录中的所有文件并按字母排序，单不包括以点号开头的文件
        这个shell中的做法完全相同

    my @pm_files = glob '*.pm';
        取得以.pm结尾的文件

    my $all_filse_including_dot = glob '.* *';
        取得所有文件名，包括点号开头的文件
        如过要匹配多种模式，可以在参数中用空格隔开

文件名通配的另一种语法
    my $all_files = <*> = my $all_files = glob '*';

    my $dir = '/etc';
    my $dir_files = <$dir/* $dir/.*>;

    my @files = <FRED/*>; # 文件名通配操作
    my @lines = <FRED>;   # 从文件句柄读取
    my @lines = <$fred>;  # 从文件句柄读取
    my @files = <$fred/*>;# 文件名通配操作

    my $name = 'FRED';
    my @lines = readline FRED;  #从FRED读取
    my @lines = readline $fred; #从FRED读取

目录句柄
    my $dir_to_process = '/etc';
    opendir my $dh,$dir_to_process or die "Cannot open $dir_to_process: $!";
    foreach $file (readdir $dh) {
        print "one file in $dir_to_process is $file\n";
    }
    closedir $dh;

    目录句柄返回的名称列表并未按照任何特定的顺序排列
    列表里包含所有的文件，包括以点号开头的文件，.和..也在其中

文件和目录的操作
    删除文件
        unlink ‘salte','bedrock','lava';
        unlink qw(slate bedrock lava);
        unlink glob '*.o';
            unlink的返回值是成功删除的文件数目
            unlink不能用来删除目录，这同不带参数的rm命令不能删除目录一样

    重命名文件
        rename 'old','new';

        rename 'over_there/some/place/some_file','some_file';
        rename 'over_there/some/place/some_file' => 'some_file';

        foreach my $file (glob "*.old") {
            my $newfile= $file;
            $newfile =~ s/\.old$/.new/;
            if(-e $newfile) {
                warn "Can't rename";
            } elsif (rename $file,$newfile) {

            } else{
                warn "rename failed";
            }
        }

    链接与文件
        link 'chichen',egg or warn "Can't link";
            建立硬链接

        symlink 'dodgson','carroll' or wayn "Can't synlink";
            建立符号链接

        my $where = readlink 'carroll';
            取得符号链接指向的位置

    创建和删除目录
        mkdir 'fred',0755 or die "Can't make fred";
            0755是八进制数
        mkdir $name,oct($perm);

        rmdir
            只能移除空目录，并且只能删除一个目录
            对非空目录调用rmdir函数会导致失败

            foreach my $dir (qw(fred barney betty)) {
                rmdir $dir or warn "Can't rm $dir";
            }

    修改权限
        chmod 0755 'fred','barney';
            chmod会返回成功更改的条目数量

    修改隶属关系
        my $user = 1004;
        my $group = 100;
        chown $user,$group,glob '*.o';

        chown必须给出数字形式的用户标示符和组标示符
        chown函数会返回受影响的文件数量

        defined(my $user = getpwnam 'lzhang') or die "bad user";
        defined(my $group = getgrnam 'digital') or die "bad group";
        chown $user,$group,glob '*.v';

    修改时间戳
        my $now = time;
        my $ago = $now - 24 * 60 * 60; #一天的秒数
        utime $now,$ago,glob '*.v';
            将最后访问时间改为当前时间，最后修改时间改为一天前









///////////////////////
    第14章 字符串与排序
///////////////////////

用index查找子字符串
    $where = index($big,$amall);
        返回$small字符串首次出现的位置，位置从0算起，无法找到返回-1
        加上第三个参数，表示指定开始搜索的位置

        my $stuff = "Howdy world";
        my $where1 = index($stuff,"w"); #返回2
        my $where2 = index($stuff,"w",$where1 +1); #返回6
        my $where3 = index($stuff,"w",$where2 +1); #返回-1

    rindex函数会从字符串末尾的地方开始找，它的第三个参数用来限定返回值的上限
        my $last_slash = rindex("/etc/passwd","/"); # 值为4

用substr操作子字符串
    my $part = substr($sting,$initial_position,$length);
        第一个参数是要操作的字符串
        第二个参数是从0算起的其实位置
        第三个参数是操作的长度
        第四个参数是要替换的字符串
        省略第三个参数，会取到字符串的结尾
        起始位置可以为负值，-1代表从最后一个字符

        my $mineral = substr("fred j. flintstone",8,5); # 返回flint
        my $rock = substr("fred j. flintstone",13); # 返回stone
        my $rock = substr("fred j. flintstone",-3,2); # 返回on

        my $string = "Hello World!";
        substr($string,0,5) = "Goodbye"; # $string变为"Goodbye World!"
        my $value = substr($string,0,5,"Goodbye"); # $value为"Goodbye World!"

用sprintf格式化字符串
    my $date_tag = sprintf "%4d/%02d/%02d %2d:%02d:%02d",$yr,$mo,$da,$h,$m,$s;
        格式化定义中数字字段的前置0表示必要时会在数字前补0以符合指定的宽度要求

用sprintf格式化金额数字
    sub big_money {
        my $number = sprintf "%2d",shift @_;
        1 while $number =~ s/^(-?\d+)(\d\d\d)/$1,$2/;
        $number =~ s/^(-?)/$1\$/;
        $number;
    }

非十进制数字字符串的转换
    hex('ff'); # 十进制数255
    hex('0xff'); # 十进制数255

    oct('0377'); #十进制数255
    oct('377'); #十进制数255
    oct(‘0xff'); #十进制数255
    oct(‘0b1101'); #十进制数13

高级排序
    数字排序
        my $numbers = sort {$a <=> $b} @some_numbers;
            以递增的顺序排序

        my $numbers = reverse sort {$a <=> $b} @some_numbers;
        my $numbers = sort {$b <=> $a} @some_numbers;
            以递减的顺序排序

    字符串排序
        my @string = sort {$a comp $b} @any_string;

    按哈希值排序
        my %score =(
                    barney  => 195,
                    fred    => 205,
                    dino    => 30,
                    );
        sub by_score {$score{$b} <=> $score{$a}};
        my @winners = sort by_score keys %score;

        my @winners = sort {$score{$b} <=> $score{$a}} keys %score;

        按多个键排序
            sub by_score_and_name{
                $score{$b} <=> $score{$a}
                or
                $a cmp $b
            }








///////////////////////
    第15章 智能匹配与given-when结构
///////////////////////
use 5.010001；#至少是这个版本

智能匹配操作符的优先级
    范例                            匹配类型
    %a ~~ %b                        哈希的键值是否一致
    %a ~~ @b 或 @a ~~ %b            %a中至少一个键在列表@b中
    %a ~~ /fred/ 或 /fred/ ~~ %a    至少有一个键匹配给定的模式
    'fred' ~~ %a                    是否存在$a{fred}
    @a ~~ @b                        数组是否相同
    @a ~~ /fred/                    @a中至少有一个元素匹配模式
    $name ~~ undef $name            $name没有定义
    $name ~~ /fred/                 模式匹配
    123 ~~ '123.0 '                 数值和numish类型的字符串是否相等
    'fred'  ~~ 'fred'               字符串是否相等
    123 ~~ 456                      数值是否相等

given语句
    given ($ARGV[0]) {
        when('Fred') {print "name is Fred"}
        when(/fred/i) {print "name has fred in it"}
        when(/\AFred/) {print "name stars with Fred"}
        default {No Fred}
    }

    given会将参数化名为$_,每个when条件都尝试用只能匹配对$_做测试

    given ($ARGV[0]) {
        when($_ ~~ 'Fred') {print "name is Fred";continue}
        when($_ ~~ /fred/i) {print "name has fred in it";continue}
        when($_ ~~ /\AFred/) {print "name stars with Fred"}
        default {No Fred}
    }
        满足某个条件后，继续测试其他条件

    笨拙匹配
        given ($ARGV[0]) {
            when($_ eq 'Fred') {print "name is Fred";continue}
            when($_ =~ /fred/i) {print "name has fred in it";continue}
            when($_ =~ /\AFred/) {print "name stars with Fred"}
            default {No Fred}
        }

多个条目的when匹配
    foreach (@names) {
        print "Processing: $_";

        when($_ eq 'Fred') {print "name is Fred";continue}
        when($_ =~ /fred/i) {print "name has fred in it";continue}
        when($_ =~ /\AFred/) {print "name stars with Fred"}
        default {No Fred}
    }








///////////////////////
    第16章 进程管理
///////////////////////

system函数
    system 'date';
    system 'ls -l $HOME';
    system 'commands whith parameters &';

避免使用shell
    my $tarfile = 'something*wicked.tar';
    my $dirs    = qw(fred|flintstone <barney&rubble betty);
    system 'tar','cvf',$tarfile,$dirs
        将三个目录打包

    system "tar cvf $tarfile $dirs";
        错误用法

    system的返回值，0表示执行成功，其他表示有问题，和Unix保持一致
        unless (system 'date') {
            print "We gave you a date,OK!\n";
        }

        !system 'rm -rf files_to_delete' or die 'something went wrong';

环境变量
    $ENV{PATH} = "/home/lzhang/bin:$ENV{PATH}";
    delete $ENV{IFS};
    my $make_result = system 'make';

exec函数
    system函数的所有语法都适用于exec函数
    ststem函数会创建子进程，子进程会在perl睡眠期间执行任务
    exec函数导致perl进程自己去执行任务
    当运行到exec时，Perl会跳进去执行，此后就没有Perl进程了
    因此，exec调用之后写的代码都无法运行
    如果启动exec出错的话，后面的语句还是可以运行的
        exec 'date';
        die "date coundn't run:$!\n";

    Perl的exec主要功能是为了另一个程序的运行设定运行环境
        $ENV{PATH} = '/bin:/usr/bin';
        $ENV{DEBUG} = 1;
        $ENV{ROCK} = 'granite';

        chdir 'users/fred';
        open SDTOUT,'>','/tmp/granite.out';

        exec 'bedrock';

用反引号捕获输出结果
    my $now = `date`;
    print "The time is now: $now";

    除了反引号，也可以用一般化引起操作符qx()
        foreach (@functions) {
            $about{$_} = qx(perldoc -t -f $_);
        }

        qx'echo $$';
            qx''避免Perl内插变量，$$是shell的变量值

    在列表上下文中使用反引号
        如果是在列表上下文中使用反引号，则会返回输出字符串按行拆分的列表

        my $who_txt = `who`;
        my @who_lines = split /\n/,$who_txt;

        my @who_lines = `who`;

        foreach (`who`) {
        }

用IPC::System::Simple执行外部进程
    IPC::System::Simple不是Perl自带的模块，需要自己安装下载

    use IPC::System::Simple qw(system);
    system 'tar','cvf',$tarfile,$dirs;

    systemx 'tar','cvf',$tarfile,$dirs;
        还提供了systemx函数，在执行外部命令时，不会调用shell

    需要捕获外部命令的输出，把system和systemx改成capture和capturex
        my $output = capture 'tar','cvf',$tarfile,$dirs;

通过文件句柄执行外部程序
    open my $date_fh,'-|','date' or die "Can't pipe from date: $!";
    open my $mail_fh,'|-','mail merlyn' or die "Can't pipe to mail: $!";
    open my $mail_fh,'|-','mail','merlyn' or die "Can't pipe to mail: $!";
        如果需要读取的文件句柄，就用-|
        如果需要写入的文件句柄，就用|-

    close $mail_fh;

    open my $find_fh,'-|','find',qw(-atime +90 -size +1000 -print) or die "fork:$!";
    while(<$find_fh>) {
        chomp;
        printf "%s size %dK last access $.2f days ago\n",$_,(1023 + -s $_)/1024,-A $_;
    }
        每找到一个文件，就会立即输出，如果用反引号的话，就必须要等find执行完之后，才能输出

发送以及接收信号
    kill 2,4201 or die "Can't signal 4201 with SIGINT: $!"
        kill是发送信号的命令
        2是要发送的信号，也可以用INT代替2
        4201是进程号

    unless(kill 0,$pid) {
        warn "$pid has gone away!";
    }
        判断某个进程是否任然存活
        编号0的特殊信号的意思是：看看能否向她发送信号，但并不是要真的发送


    my $tmp_dir = "/tmp/myprog.$$";
    mkdir $tmpdir,0700 or die "Can't create $tmpdir: $!";

    sub clean_up {
        unlink glob "$tmp_dir/*";
        rmdir $tmp_dir;
    }

    $SIG{'INT'} = 'clean_up';





///////////////////////
    第17章 Perl 高级技巧
///////////////////////

列表切片
    my $mtime= (stat $some_file)[9];
    my ($card_num,$count) = (split /:/)[1,5];
    my ($first,$last) = (sort @names)[0,-1];
    my @numbers = (@names)[0,4,2,0,1];

数组切片
    my @numbers = @names[0,4,2,0,1];
    print "Bedrock @names[2,4,0]\n";
    @items[2,3] = ($new_address,$new_phone);


哈希切片
    my @three_scores = @score{qw/ barney fred dino /};

    my @players = qw(barney fred dino);
    my $bowling_scores = (195,205,30);
    @score{@players} = @bowling_scores;

捕获错误
    用eval
        当eval捕获到了错误时，停下来的只是这个语句块，整个程序不会崩溃
        eval的返回值是语句块最后一条表达式的结果，和子程序相同
        如果eval捕获到了错误，整个语句块会返回undef
        并且在特殊变量$@中设置错误信息
        如果没有捕获到错误，$@就是空的
        eval {$barney = $fred / $dino};

        unless(eval {$fred / $dino}) {
            print "Can't divide : $@" if $@;
        }

        unless(eval {&some_sub();1}) {
            print "Can't divide : $@" if $@;
        }
            给eval指定一个返回值

        在列表上下文中，eval捕获到错误会返回空列表

autodie
    从Perl 5.10.1开始，自带的autodie编译指令负责自动抛出异常
    autodie会对处理文件、文件句柄、进程间通信和套接字的函数自动施行监管
        use autodie;

    可以自行指定需要施行autodie监管的操作符
        use autodie qw(open system :socket);

    当autodie抛出错误时，它会把一个autodie::exception对象放到$@中
        use 5.010;
        open my $fh,'>',$filename;
        given($@) {
            when(undef) {say "No error"}
            when('open') {say "Error from open"}
            when(':io') {say "Non-open,IO error"}
            when(':all') {say "All other autodie errors"}
            default {say "Not an autodie error at all"}
        }

用grep筛选列表
    foreach (1..100) {
        push @odd_num,$_ if $_ / 2;
    }

    $odd_num = grep {$_ / 2} 1..100;
    my @match_lines = grep {/\bgrep\b/i} <$fh>;


    在标量上下文中，返回的是过滤符合条件的元素个数
        my $line_cnt = grep /\bfred\b/i,<fh>;

用map把列表元素变形
    foreeach (@data) {
        push @formatted_data,&big_money($_);
    }

    my @formatted_data = map {&big_money($_)} @data;

    print "The money numbers are:\n",map {sprintf("%25s\n",$big_money($_))} @data;





